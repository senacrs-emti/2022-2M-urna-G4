generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  isAdmin   Boolean  @default(false)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Citizens {
  id            Int           @id @default(autoincrement())
  voterDocument String        @unique
  name          String
  zone          String
  section       String
  state         String
  isCanceled    Boolean       @default(false)
  CitizenVotes  CitizenVotes?
  Voting        Voting?

  @@map("citizens")
}

model Parties {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  acronym    String       @unique
  number     Int          @unique
  Candidates Candidates[]

  @@map("parties")
}

model Roles {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  Candidates Candidates[]

  @@map("roles")
}

model Elections {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  year           String
  type           String
  isActive       Boolean          @default(true)
  Candidates     Candidates[]
  CitizenVotes   CitizenVotes[]
  ElectionsVotes ElectionsVotes[]

  @@map("elections")
}

model Candidates {
  id             Int              @id @default(autoincrement())
  name           String
  displayName    String
  number         Int
  electionId     Int
  partyId        Int
  roleId         Int
  election       Elections        @relation(fields: [electionId], references: [id])
  parties        Parties          @relation(fields: [partyId], references: [id])
  Role           Roles            @relation(fields: [roleId], references: [id])
  ElectionsVotes ElectionsVotes[]

  @@map("candidates")
}

model ElectionsVotes {
  id          Int        @id @default(autoincrement())
  electionId  Int
  candidateId Int
  zone        String
  section     String
  state       String
  candidate   Candidates @relation(fields: [candidateId], references: [id])
  election    Elections  @relation(fields: [electionId], references: [id])

  @@map("elections_votes")
}

model CitizenVotes {
  citizenId  Int       @unique
  electionId Int
  votedAt    DateTime  @default(now())
  citizen    Citizens  @relation(fields: [citizenId], references: [id])
  election   Elections @relation(fields: [electionId], references: [id])

  @@map("citizen_votes")
}

model Voting {
  citizenId Int      @unique
  citizen   Citizens @relation(fields: [citizenId], references: [id])

  @@map("voting")
}
