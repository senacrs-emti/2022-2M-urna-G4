generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  isAdmin   Boolean  @default(false)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Citizens {
  id            Int            @id @default(autoincrement())
  voterDocument String         @unique
  name          String
  zone          String
  section       String
  state         String
  isCanceled    Boolean        @default(false)
  CitizenVotes  CitizenVotes[]
  Voting        Voting[]

  @@map("citizens")
}

model Parties {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  acronym    String       @unique
  number     Int          @unique
  Candidates Candidates[]

  @@map("parties")
}

model Roles {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  Candidates Candidates[]

  @@map("roles")
}

model Elections {
  id   Int    @id @default(autoincrement())
  name String @unique
  tyoe String
  year String

  startsAt       DateTime         @default(now())
  endsAt         DateTime
  Candidates     Candidates[]
  ElectionsVotes ElectionsVotes[]
  CitizenVotes   CitizenVotes[]

  @@map("elections")
}

model Candidates {
  id          Int    @id @default(autoincrement())
  name        String
  displayName String
  number      Int

  election   Elections @relation(fields: [electionId], references: [id])
  electionId Int

  parties Parties @relation(fields: [partyId], references: [id])
  partyId Int

  Role           Roles            @relation(fields: [roleId], references: [id])
  roleId         Int
  ElectionsVotes ElectionsVotes[]

  @@map("candidates")
}

model ElectionsVotes {
  id         Int       @id @default(autoincrement())
  election   Elections @relation(fields: [electionId], references: [id])
  electionId Int

  candidate   Candidates @relation(fields: [candidateId], references: [id])
  candidateId Int

  zone    String
  section String
  state   String

  @@map("elections_votes")
}

model CitizenVotes {
  citizen   Citizens @relation(fields: [citizenId], references: [id])
  citizenId Int      @unique

  election   Elections @relation(fields: [electionId], references: [id])
  electionId Int

  votedAt DateTime @default(now())

  @@map("citizen_votes")
}

model Voting {
  citizen   Citizens @relation(fields: [citizenId], references: [id])
  citizenId Int      @unique

  @@map("voting")
}
